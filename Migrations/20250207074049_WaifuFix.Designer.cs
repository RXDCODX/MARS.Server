// <auto-generated />
using System;
using MARS.Server.DataBaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Telegramus.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250207074049_WaifuFix")]
    partial class WaifuFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Telegramus.DataBaseContext.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WhenLogged")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Telegramus.Services.AutoArts.Entitys.AutoArtInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AutoArtsInfo");
                });

            modelBuilder.Entity("Telegramus.Services.LiveChannelRenamer.Entitys.LiveChannelRenamerState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActualPrefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDiscordChannelRenamed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiscordGuiildNameRenamed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTelegramChannelRenamed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVkGroupRenamed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LiveChannelState");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualPrefix = "[LIVE 🔴] ",
                            IsDiscordChannelRenamed = false,
                            IsDiscordGuiildNameRenamed = false,
                            IsTelegramChannelRenamed = false,
                            IsVkGroupRenamed = false,
                            LastEnd = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastStart = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            State = 0
                        });
                });

            modelBuilder.Entity("Telegramus.Services.PyroAlerts.Entitys.MediaInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("Telegramus.Services.RandomMem.Entity.VideoOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Order"));

                    b.HasKey("Id");

                    b.ToTable("RandomMemeOrder");
                });

            modelBuilder.Entity("Telegramus.Services.Resender.Entitys.CrossChat.CrossChatLinks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DiscordMessage")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("TelegramMessage")
                        .HasColumnType("integer");

                    b.Property<long?>("VkMessage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ResendLinks");
                });

            modelBuilder.Entity("Telegramus.Services.Resender.Entitys.CrossChat.CrossChatReply", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DiscordMessage")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("SourceChat")
                        .HasColumnType("smallint");

                    b.Property<int?>("TelegramMessages")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("Telegramus.Services.TelegramBotService.Entitys.TelegramUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ByeByeLastMessageTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ByeByeServiceNotification")
                        .HasColumnType("boolean");

                    b.Property<bool>("HonkaiNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastTimeMessage")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("PyroAlertsAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("RaidHelper")
                        .HasColumnType("boolean");

                    b.Property<bool>("StreamUpNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("ZenlessZoneZeroDailyNotif")
                        .HasColumnType("boolean");

                    b.HasKey("UserId");

                    b.ToTable("TelegramUsers");
                });

            modelBuilder.Entity("Telegramus.Services.Twitch.ClientMessages.AutoMessages.Entitys.AutoMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AutoMessages");
                });

            modelBuilder.Entity("Telegramus.Services.Twitch.ClipsReUploader.Entitys.VideoFromTwitchClip", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterId")
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("text");

                    b.Property<string>("CreatorId")
                        .HasColumnType("text");

                    b.Property<string>("CreatorName")
                        .HasColumnType("text");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<string>("EmbedUrl")
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("PathToLocalFile")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("VideoId")
                        .HasColumnType("text");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.Property<int>("VodOffset")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("WhenUploaded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("YouTubeUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clips");
                });

            modelBuilder.Entity("Telegramus.Services.Twitch.FumoFriday.Entitys.FumoUser", b =>
                {
                    b.Property<string>("TwitchId")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TwitchId");

                    b.ToTable("FumoUsers");
                });

            modelBuilder.Entity("Telegramus.Services.Twitch.HelloVideos.Entitys.HelloVideosUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastTimeNotif")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MediaInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MediaInfoId")
                        .IsUnique();

                    b.ToTable("HelloVideosUsers");
                });

            modelBuilder.Entity("Telegramus.Services.Twitch.TokenInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ExpiresIn")
                        .HasColumnType("interval");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WhenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TwitchToken");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.Host", b =>
                {
                    b.Property<string>("TwitchId")
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OrderCount")
                        .HasColumnType("bigint");

                    b.Property<string>("WaifuBrideId")
                        .HasColumnType("text");

                    b.Property<string>("WaifuRollId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WhenOrdered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("WhenPrivated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TwitchId");

                    b.ToTable("Hosts");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.HostAutoHello", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Guid");

                    b.HasIndex("HostId")
                        .IsUnique();

                    b.ToTable("AutoHello");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.HostCoolDown", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Guid");

                    b.HasIndex("HostId")
                        .IsUnique();

                    b.ToTable("CD");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.Waifu", b =>
                {
                    b.Property<string>("ShikiId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("Age")
                        .HasColumnType("bigint");

                    b.Property<string>("Anime")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsPrivated")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastOrder")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Manga")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("WhenAdded")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ShikiId");

                    b.ToTable("Waifus");
                });

            modelBuilder.Entity("Telegramus.Services._365.Entitys.Video365", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateUpload")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectLinkUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("PlayerUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.Property<long>("TelegramMessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Videos365");
                });

            modelBuilder.Entity("Telegramus.Services.kuropaw.Entity.TwitchChannelInspector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastCheck")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TwitchChannelInspectors");
                });

            modelBuilder.Entity("Telegramus.Services.PyroAlerts.Entitys.MediaInfo", b =>
                {
                    b.OwnsOne("Telegramus.Services.PyroAlerts.Entitys.MediaFileInfo", "FileInfo", b1 =>
                        {
                            b1.Property<Guid>("MediaInfoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Extension")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FileInfo_Extension");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FileInfo_FileName");

                            b1.Property<string>("LocalFilePath")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FileInfo_LocalFilePath");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FileInfo_Type");

                            b1.HasKey("MediaInfoId");

                            b1.ToTable("Alerts");

                            b1.WithOwner()
                                .HasForeignKey("MediaInfoId");
                        });

                    b.OwnsOne("Telegramus.Services.PyroAlerts.Entitys.MediaMetaInfo", "MetaInfo", b1 =>
                        {
                            b1.Property<Guid>("MediaInfoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("MetaInfo_DisplayName");

                            b1.Property<int>("Duration")
                                .HasColumnType("integer")
                                .HasColumnName("MetaInfo_Duration");

                            b1.Property<bool>("IsLooped")
                                .HasColumnType("boolean")
                                .HasColumnName("MetaInfo_IsLooped");

                            b1.Property<int>("TwitchPointsCost")
                                .HasColumnType("integer")
                                .HasColumnName("MetaInfo_TwitchPointsCost");

                            b1.Property<bool>("VIP")
                                .HasColumnType("boolean")
                                .HasColumnName("MetaInfo_VIP");

                            b1.HasKey("MediaInfoId");

                            b1.ToTable("Alerts");

                            b1.WithOwner()
                                .HasForeignKey("MediaInfoId");
                        });

                    b.OwnsOne("Telegramus.Services.PyroAlerts.Entitys.MediaPositionInfo", "PositionInfo", b1 =>
                        {
                            b1.Property<Guid>("MediaInfoId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Height")
                                .HasColumnType("integer")
                                .HasColumnName("PositionInfo_Height");

                            b1.Property<bool>("IsHorizontalCenter")
                                .HasColumnType("boolean")
                                .HasColumnName("PositionInfo_IsHorizontalCenter");

                            b1.Property<bool>("IsProportion")
                                .HasColumnType("boolean")
                                .HasColumnName("PositionInfo_IsProportion");

                            b1.Property<bool>("IsResizeRequires")
                                .HasColumnType("boolean")
                                .HasColumnName("PositionInfo_IsResizeRequires");

                            b1.Property<bool>("IsRotated")
                                .HasColumnType("boolean")
                                .HasColumnName("PositionInfo_IsRotated");

                            b1.Property<bool>("IsUseOriginalWidthAndHeight")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsVerticallCenter")
                                .HasColumnType("boolean")
                                .HasColumnName("PositionInfo_IsVerticallCenter");

                            b1.Property<bool>("RandomCoordinates")
                                .HasColumnType("boolean")
                                .HasColumnName("PositionInfo_RandomCoordinates");

                            b1.Property<int>("Rotation")
                                .HasColumnType("integer")
                                .HasColumnName("PositionInfo_Rotation");

                            b1.Property<int>("Width")
                                .HasColumnType("integer")
                                .HasColumnName("PositionInfo_Width");

                            b1.Property<int>("XCoordinate")
                                .HasColumnType("integer")
                                .HasColumnName("PositionInfo_XCoordinate");

                            b1.Property<int>("YCoordinate")
                                .HasColumnType("integer")
                                .HasColumnName("PositionInfo_YCoordinate");

                            b1.HasKey("MediaInfoId");

                            b1.ToTable("Alerts");

                            b1.WithOwner()
                                .HasForeignKey("MediaInfoId");
                        });

                    b.OwnsOne("Telegramus.Services.PyroAlerts.Entitys.MediaStylesInfo", "StylesInfo", b1 =>
                        {
                            b1.Property<Guid>("MediaInfoId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsBorder")
                                .HasColumnType("boolean")
                                .HasColumnName("StylesInfo_IsBorder");

                            b1.HasKey("MediaInfoId");

                            b1.ToTable("Alerts");

                            b1.WithOwner()
                                .HasForeignKey("MediaInfoId");
                        });

                    b.OwnsOne("Telegramus.Services.PyroAlerts.Entitys.MediaTextInfo", "TextInfo", b1 =>
                        {
                            b1.Property<Guid>("MediaInfoId")
                                .HasColumnType("uuid");

                            b1.Property<char?>("KeyWordSybmolDelimiter")
                                .HasColumnType("character(1)");

                            b1.Property<string>("KeyWordsColor")
                                .HasColumnType("text")
                                .HasColumnName("TextInfo_KeyWordsColor");

                            b1.Property<string>("Text")
                                .HasColumnType("text")
                                .HasColumnName("TextInfo_Text");

                            b1.Property<string>("TextColor")
                                .HasColumnType("text")
                                .HasColumnName("TextInfo_TextColor");

                            b1.Property<string>("TriggerWord")
                                .HasColumnType("text")
                                .HasColumnName("TextInfo_TriggerWord");

                            b1.HasKey("MediaInfoId");

                            b1.ToTable("Alerts");

                            b1.WithOwner()
                                .HasForeignKey("MediaInfoId");
                        });

                    b.Navigation("FileInfo")
                        .IsRequired();

                    b.Navigation("MetaInfo")
                        .IsRequired();

                    b.Navigation("PositionInfo")
                        .IsRequired();

                    b.Navigation("StylesInfo")
                        .IsRequired();

                    b.Navigation("TextInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Telegramus.Services.Twitch.HelloVideos.Entitys.HelloVideosUsers", b =>
                {
                    b.HasOne("Telegramus.Services.PyroAlerts.Entitys.MediaInfo", "MediaInfo")
                        .WithOne()
                        .HasForeignKey("Telegramus.Services.Twitch.HelloVideos.Entitys.HelloVideosUsers", "MediaInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaInfo");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.HostAutoHello", b =>
                {
                    b.HasOne("Telegramus.Services.WaifuRoll.Entitys.Host", "Host")
                        .WithOne("HostGreetings")
                        .HasForeignKey("Telegramus.Services.WaifuRoll.Entitys.HostAutoHello", "HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.HostCoolDown", b =>
                {
                    b.HasOne("Telegramus.Services.WaifuRoll.Entitys.Host", "Host")
                        .WithOne("HostCoolDown")
                        .HasForeignKey("Telegramus.Services.WaifuRoll.Entitys.HostCoolDown", "HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.Host", b =>
                {
                    b.Navigation("HostCoolDown")
                        .IsRequired();

                    b.Navigation("HostGreetings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
