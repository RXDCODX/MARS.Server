// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Telegramus.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241027093803_ResendLinkAddVk")]
    partial class ResendLinkAddVk
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Telegramus.DataBaseContext.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WhenLogged")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Telegramus.Services.Framedata.Entitys.Move", b =>
                {
                    b.Property<string>("CharacterName")
                        .HasColumnType("text");

                    b.Property<string>("Command")
                        .HasColumnType("text");

                    b.Property<string>("BlockFrame")
                        .HasColumnType("text");

                    b.Property<string>("CounterHitFrame")
                        .HasColumnType("text");

                    b.Property<string>("Damage")
                        .HasColumnType("text");

                    b.Property<bool>("HeatBurst")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatEngage")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatSmash")
                        .HasColumnType("boolean");

                    b.Property<string>("HitFrame")
                        .HasColumnType("text");

                    b.Property<string>("HitLevel")
                        .HasColumnType("text");

                    b.Property<bool>("Homing")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("PowerCrush")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresHeat")
                        .HasColumnType("boolean");

                    b.Property<string>("StanceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StanceName")
                        .HasColumnType("text");

                    b.Property<string>("StartUpFrame")
                        .HasColumnType("text");

                    b.Property<bool>("Throw")
                        .HasColumnType("boolean");

                    b.Property<bool>("Tornado")
                        .HasColumnType("boolean");

                    b.HasKey("CharacterName", "Command");

                    b.ToTable("TekkenMoves");
                });

            modelBuilder.Entity("Telegramus.Services.Framedata.Entitys.TekkenCharacter", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LinkToImage")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("TekkenCharacters");
                });

            modelBuilder.Entity("Telegramus.Services.PyroAlerts.Entitys.MediaInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBorder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLooped")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProportion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResizeRequires")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRotated")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyWord")
                        .HasColumnType("text");

                    b.Property<bool>("RandomCoordinates")
                        .HasColumnType("boolean");

                    b.Property<int>("Rotation")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("TextColor")
                        .HasColumnType("text");

                    b.Property<int>("TwitchPointsCost")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("VIP")
                        .HasColumnType("boolean");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("XCoordinate")
                        .HasColumnType("integer");

                    b.Property<int>("YCoordinate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("Telegramus.Services.Resender.Entitys.CrossChat.CrossChatLinks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DiscordMessage")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("TelegramMessage")
                        .HasColumnType("integer");

                    b.Property<long?>("VkMessage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ResendLinks");
                });

            modelBuilder.Entity("Telegramus.Services.Resender.Entitys.CrossChat.CrossChatReply", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DiscordMessage")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte>("SourceChat")
                        .HasColumnType("smallint");

                    b.Property<int?>("TelegramMessages")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("Telegramus.Services.TelegramBotService.Entitys.TelegramUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ByeByeLastMessageTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ByeByeServiceNotification")
                        .HasColumnType("boolean");

                    b.Property<bool>("HonkaiNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastTimeMessage")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("PyroAlertsAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("RaidHelper")
                        .HasColumnType("boolean");

                    b.Property<bool>("StreamUpNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("ZenlessZoneZeroDailyNotif")
                        .HasColumnType("boolean");

                    b.HasKey("UserId");

                    b.ToTable("TelegramUsers");
                });

            modelBuilder.Entity("Telegramus.Services.Twitch.ClientMessages.AutoMessages.Entitys.AutoMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AutoMessages");
                });

            modelBuilder.Entity("Telegramus.Services.Twitch.ClipsReUploader.Entitys.VideoFromTwitchClip", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterId")
                        .HasColumnType("text");

                    b.Property<string>("BroadcasterName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("text");

                    b.Property<string>("CreatorId")
                        .HasColumnType("text");

                    b.Property<string>("CreatorName")
                        .HasColumnType("text");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<string>("EmbedUrl")
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("PathToLocalFile")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("VideoId")
                        .HasColumnType("text");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.Property<int>("VodOffset")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("WhenUploaded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("YouTubeUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clips");
                });

            modelBuilder.Entity("Telegramus.Services.Twitch.TokenInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ExpiresIn")
                        .HasColumnType("interval");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WhenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TwitchToken");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.Host", b =>
                {
                    b.Property<string>("TwitchId")
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OrderCount")
                        .HasColumnType("bigint");

                    b.Property<string>("WaifuBrideId")
                        .HasColumnType("text");

                    b.Property<string>("WaifuRollId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WhenOrdered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("WhenPrivated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TwitchId");

                    b.ToTable("Hosts");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.HostAutoHello", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Guid");

                    b.HasIndex("HostId")
                        .IsUnique();

                    b.ToTable("AutoHello");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.HostCoolDown", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Guid");

                    b.HasIndex("HostId")
                        .IsUnique();

                    b.ToTable("CD");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.Waifu", b =>
                {
                    b.Property<string>("ShikiId")
                        .HasColumnType("text");

                    b.Property<long>("Age")
                        .HasColumnType("bigint");

                    b.Property<string>("Anime")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivated")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastOrder")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Manga")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrderCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("WhenAdded")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ShikiId");

                    b.ToTable("Waifus");
                });

            modelBuilder.Entity("Telegramus.Services.Framedata.Entitys.Move", b =>
                {
                    b.HasOne("Telegramus.Services.Framedata.Entitys.TekkenCharacter", "Character")
                        .WithMany("Movelist")
                        .HasForeignKey("CharacterName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.HostAutoHello", b =>
                {
                    b.HasOne("Telegramus.Services.WaifuRoll.Entitys.Host", "Host")
                        .WithOne("HostGreetings")
                        .HasForeignKey("Telegramus.Services.WaifuRoll.Entitys.HostAutoHello", "HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.HostCoolDown", b =>
                {
                    b.HasOne("Telegramus.Services.WaifuRoll.Entitys.Host", "Host")
                        .WithOne("HostCoolDown")
                        .HasForeignKey("Telegramus.Services.WaifuRoll.Entitys.HostCoolDown", "HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Telegramus.Services.Framedata.Entitys.TekkenCharacter", b =>
                {
                    b.Navigation("Movelist");
                });

            modelBuilder.Entity("Telegramus.Services.WaifuRoll.Entitys.Host", b =>
                {
                    b.Navigation("HostCoolDown")
                        .IsRequired();

                    b.Navigation("HostGreetings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
